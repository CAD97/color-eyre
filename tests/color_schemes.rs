
#[test]
fn test_backwards_compatibility(){

    let target_error = "./color_eyre_error.txt";
    let saved_error = "./color_eyre_error_saved.txt";

    /*
        Note: This test expects the above files (which are generated via `cargo run --example save_error_for_color_scheme_test`). `saved_error` has to be generated by a version of this crate that you want to test against.


        Todos if compatibility test should be kept:

        - inline data of `saved_error`
        - integrate code from `save_error_for_color_scheme_test` somehow here
        - generate the data without saving a file
        - better test output (convert to string)
        - split `test_backwards_compatibility` up into several tests

        Not possible to test:

        - config::DefaultPanicMessage: There is no way to create `std::panic::PanicInfo` on stable
    */

    let target_error = std::fs::read(target_error)
        .expect("Failed to read `target_error` from file");

    let saved_error = std::fs::read(saved_error)
        .expect("Failed to read `saved_error` from file");
    
    assert_eq!(saved_error, target_error);
}